/// complex numbers
For a given complex number a + bi, we can compute its polar form as
r = |a + b * i| = sqrt(a * a + b * b)
ϕ = arg(a + bi) = atan2(b, a)

and conversely, a complex number with polar coordinates r, ϕ can be written
r cos ϕ + (r sin ϕ)i = r(cos ϕ + isin ϕ) =: r cis ϕ

Multiplication
cis ϕ = cos ϕ + isin ϕ
(r1 cis ϕ1) ∗ (r2 cis ϕ2) = (r1r2) cis(ϕ1 + ϕ2).
(a + bi) ∗ (c + di) =  (ac − bd) + (ad + bc)i
typedef double T;

/// Transformation
// translation
add the vector to the every point of the object we want to translate
// Scaling
f(p) = c + α(p − c)
/// products and angles
// dot and cross product










/// structures 
// point
typedef double T;
struct pt {
    T x,y;
    pt operator+(pt p) {return {x+p.x, y+p.y};}
    pt operator-(pt p) {return {x-p.x, y-p.y};}
    pt operator*(T d) {return {x*d, y*d};}
    pt operator/(T d) {return {x/d, y/d};} // only for floatingpoint
};
T sq(pt p) {return p.x*p.x + p.y*p.y;}
double abs(pt p) {return sqrt(sq(p));}
pt translate(pt v, pt p) {return p+v;}
pt scale(pt c, double factor, pt p) {
    return c + (p-c)*factor;
}
pt rot(pt p, double a) {
    return {p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a)};
}
/*pt linearTransfo(pt p, pt q, pt r, pt fp, pt fq) { // haven't understand it yet
  return fp + (r-p) * (fq-fp) / (q-p);
}*/
T dot(pt v, pt w) {return v.x*w.x + v.y*w.y;}
T cross(pt v, pt w) {return v.x*w.y - v.y*w.x;}
double angle(pt v, pt w) {
  double cosTheta = dot(v,w) / abs(v) / abs(w);
  return acos(max(-1.0, min(1.0, cosTheta)));
}
//  orient(A, B, C) is positive if when going from A to B to C we turn left, negative if we turn right, and zero if A, B, C are collinear.
T orient(pt a, pt b, pt c) {return cross(b-a,c-a);}
// check if point p lies in the angle formed by points a, b and c
bool inAngle(pt a, pt b, pt c, pt p) {
    assert(orient(a,b,c) != 0);
    if (orient(a,b,c) < 0) swap(b,c);
        return orient(a,b,p) >= 0 && orient(a,c,p) <= 0;
}
double orientedAngle(pt a, pt b, pt c) {
if (orient(a,b,c) >= 0)
    return angle(b-a, c-a);
else
    return 2*M_PI - angle(b-a, c-a);
}
// given the points of any ploygon check if it's convex or not 
bool isConvex(vector<pt> p) {
    bool hasPos=false, hasNeg=false;
    for (int i=0, n=p.size(); i<n; i++) {
    int o = orient(p[i], p[(i+1)%n], p[(i+2)%n]);
    if (o > 0) hasPos = true;
    if (o < 0) hasNeg = true;
}
return !(hasPos && hasNeg);
}
bool half(pt p) { // true if in blue half
    assert(p.x != 0 || p.y != 0); // the argument of (0,0) is undefined
    return p.y > 0 || (p.y == 0 && p.x < 0);
}
void polarSort(vector<pt> &v) {
    sort(v.begin(), v.end(), [](pt v, pt w) {
        return make_tuple(half(v), 0, sq(v)) < make_tuple(half(w), cross(v,w), sq(w));});
}


template <typename T> int sgn(T x) {
    return (T(0) < x) - (x < T(0));
}

// point complex
typedef double T;
typedef complex<T> pt;
#define x real()
#define y imag()


